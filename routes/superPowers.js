/** Express router providing SuperPowers related routes
 * @module superpowers
 */

/**
  * @typedef {Object} SuperPower
  * @property {?String} _id SuperPower id auto generated by the system
  * @property {String} name Name of superpower
  * @property {String} description Brief description of what the superpower do
  */

/**
  * @typedef {Object} Response
  * @property {boolean} success flag that indicate if the operation was executed successfully or with error
  * @property {String} message Message to clarify the status flag
  * @property {?Data} data Object that store the server retrieved data
  * @property {?String} error Error message to clarify the status flag
  */

/**
  * @typedef {Object} Data
  * @property {?Array.<SuperPower>} list List of superpowers
  * @property {?String} page Page of list returned
  * @property {?String} limit Number max of elements returned in the list
  * @property {?SuperPower} superpowers Superpower data retrieved (for update and delete, only the _id parameter will be filled)
  */
const createRouter = (SuperPowerModel, SuperHeroModel)=> {
	const	express             = require('express'),
        router              = express.Router(),
        SuperPowerController= require('../controllers/SuperPowerController')(SuperPowerModel, SuperHeroModel),
        middlewareAuth      = require('../controllers/middlewareAuth')

/**
 	* Route to retrieve superpowers list.
 	* @name get/superpowers
 	* @function
 	* @memberof module:superpowers
  * @inner
	* @param {String} x-access-token Token to authenticate the user
  * @param {?String} page Page of lits that must be returned (default = 0)
  * @param {?String} limit Number max of elements returned in the list (defaul = 10)
 	* @returns {Response} List of superpowers registered.
 	*/
	router.get('/',         middlewareAuth({route: 6}), SuperPowerController.readAll.bind(SuperPowerController))

/**
 	* Route to insert new superpowers. Only available to Admin users.
 	* @name post/superpowers
 	* @function
 	* @memberof module:superpowers
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {SuperPower} superpower SuperPower data that will be included
 	* @returns {Response} Status of operation.
 	*/
	router.post('/',        middlewareAuth({route: 7}), SuperPowerController.create.bind(SuperPowerController))

	/**
 	* Route to update one specific superpower. Only available to Admin users.
 	* @name put/superpowers
 	* @function
 	* @memberof module:superpowers
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {String} id SuperPower id that will be updated
	* @param {SuperPower} superpower New superpower data
 	* @returns {Response} Status of operation.
 	*/
	router.put('/:_id',     middlewareAuth({route: 8}), SuperPowerController.update.bind(SuperPowerController))

	/**
 	* Route to delete one specific superpower. Only available to Admin users and only superpowers not associated with super heroes can be deleted.
 	* @name delete/superpowers
 	* @function
 	* @memberof module:superpowers
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {String} id SuperPower id that will be deleted
 	* @returns {Response} Status of operation.
 	*/
	router.delete('/:_id',  middlewareAuth({route: 9}), SuperPowerController.delete.bind(SuperPowerController))

	/**
 	* Route to retrieve one specific superpower.
 	* @name get/superpowers
 	* @function
 	* @memberof module:superpowers
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {String} id SuperPower id that will be retrieved
 	* @returns {Response} Status of operation.
 	*/
	router.get('/:_id',     middlewareAuth({route: 10}),SuperPowerController.readById.bind(SuperPowerController))
	return router
}

module.exports = createRouter