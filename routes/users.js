 /** Express router providing user related routes
  * @module users
  */

 /**
  * @typedef {Object} User
  * @property {?String} _id User id auto generated by the system
  * @property {String} username Username used to authenticate in the system
  * @property {String} password Secret password defined to authenticate in the system
  * @property {String} role Role of user - Can be 'Admin' or 'Standard'
  */

 /**
  * @typedef {Object} Response
  * @property {boolean} success flag that indicate the status of operation (true - authentication success / false - error to authenticate)
  * @property {String} message Message to clarify the status flag
  * @property {?Data} data Object that store the server retrieved data
  * @property {?String} error Error message to clarify the status flag
  */

 /**
  * @typedef {Object} Data
  * @property {?String} token Token that allow user to use the other endpoints
  * @property {?Array.<User>} list List of users
  * @property {?String} page Page of list returned
  * @property {?String} limit Number max of elements returned in the list
  * @property {?User} users User data retrieved (for update and delete, only the _id parameter will be filled)
  */

const createRouter = (UserModel)=> {
	const	express         = require('express'),
  			router					= express.Router(),        
        UserController	= require('../controllers/UserController')(UserModel),
        middlewareAuth	= require('../controllers/middlewareAuth')

	/**
 	* Route to retrieve users list. Only available to Admin users.
 	* @name get/users
 	* @function
 	* @memberof module:users
  * @inner
  * @param {String} x-access-token Token to authenticate the user
  * @param {?String} page Page of lits that must be returned (default = 0)
  * @param {?String} limit Number max of elements returned in the list (defaul = 10)
 	* @returns {Response} List of users registered.
 	*/
	router.get('/', middlewareAuth({route: 11}), UserController.readAll.bind(UserController))

	/**
 	* Route to insert new users. Only available to Admin users.
 	* @name post/users
 	* @function
 	* @memberof module:users
  * @inner
  * @param {String} x-access-token Token to authenticate the user
	* @param {User} user User data that will be included
 	* @returns {Response} Status of operation.
 	*/
	router.post('/', middlewareAuth({route: 12}), UserController.create.bind(UserController))

	/**
 	* Route to update one specific user. Only available to Admin users.
 	* @name put/users
 	* @function
 	* @memberof module:users
  * @inner
  * @param {String} x-access-token Token to authenticate the user
	* @param {String} id User id that will be updated
	* @param {User} user New user data
 	* @returns {Response} Status of operation.
 	*/
	router.put('/:_id', middlewareAuth({route: 13}), UserController.update.bind(UserController))

	/**
 	* Route to delete one specific user. Only available to Admin users.
 	* @name delete/users
 	* @function
 	* @memberof module:users
  * @inner
  * @param {String} x-access-token Token to authenticate the user
	* @param {String} id User id that will be deleted
 	* @returns {Response} Status of operation.
 	*/
	router.delete('/:_id', middlewareAuth({route: 14}), UserController.delete.bind(UserController))

	/**
 	* Route to retrieve users list. Only available to Admin users.
 	* @name post/users/authenticate
 	* @function
 	* @memberof module:users
	* @inner
	* @param {json} userdata
	*   @param {String} userdata.username Username used to authenticate in the system
	*   @param {String} userdata.password Secret password defined to authenticate in the system
  * @returns {Response}
 	*/
	router.post('/authenticate', UserController.authenticate.bind(UserController))
	return router
}

module.exports = createRouter