/** Express router providing SuperPowers related routes
 * @module superheroes
 */

/**
  * @typedef {Object} ProtectionArea
  * @property {?String} _id ProtectionArea id auto generated by the system
  * @property {String} name Name of protection area
  * @property {String} lat Latitude of superhero base
  * @property {String} long Longitude of superhero base
  * @property {String} radius Radius of superhero action (in Kilometers)
  */

/**
  * @typedef {Object} SuperHero
  * @property {?String} _id SuperHero id auto generated by the system
  * @property {String} name Name of superhero
  * @property {String} alias Other name used by the superhero (hidden identity, nick name, etc)
  * @property {ProtectionArea} protectionArea Protection area of superhero
  * @property {Array.<String>} superpower List of superpowers that the superhero is blessed (only the _id value)
  */

/**
  * @typedef {Object} Response
  * @property {boolean} success flag that indicate if the operation was executed successfully or with error
  * @property {String} message Message to clarify the status flag
  * @property {?Data} data Object that store the server retrieved data
  * @property {?String} error Error message to clarify the status flag
  */

/**
  * @typedef {Object} Data
  * @property {?Array.<SuperHero>} list List of superheroes
  * @property {?String} page Page of list returned
  * @property {?String} limit Number max of elements returned in the list
  * @property {?SuperHero} superheroes SuperHero data retrieved (for update and delete, only the _id parameter will be filled)
  */

const createRouter = (SuperHeroModel)=> {
	const	express             = require('express'),
        router              = express.Router(),
        SuperHeroController = require('../controllers/SuperHeroController')(SuperHeroModel),
        middlewareAuth      = require('../controllers/middlewareAuth')

	/**
 	* Route to retrieve superheroes list.
 	* @name get/superheroes
 	* @function
 	* @memberof module:superheroes
  * @inner
	* @param {String} x-access-token Token to authenticate the user
  * @param {?String} page Page of lits that must be returned (default = 0)
  * @param {?String} limit Number max of elements returned in the list (defaul = 10)
 	* @returns {Response} List of superheroes registered.
 	*/
	router.get('/',         middlewareAuth({route: 1}), SuperHeroController.readAll.bind(SuperHeroController))

	/**
 	* Route to insert new superheroes. Only available to Admin users.
 	* @name post/superheroes
 	* @function
 	* @memberof module:superheroes
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {SuperHero} superhero SuperHero data that will be included
 	* @returns {Response} Status of operation.
 	*/
	router.post('/',        middlewareAuth({route: 2}), SuperHeroController.create.bind(SuperHeroController))

	/**
 	* Route to update one specific superhero. Only available to Admin users.
 	* @name put/superheroes
 	* @function
 	* @memberof module:superheroes
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {String} id SuperHero id that will be updated
	* @param {SuperHero} superhero New superhero data
 	* @returns {Response} Status of operation.
 	*/
	router.put('/:_id',     middlewareAuth({route: 3}), SuperHeroController.update.bind(SuperHeroController))

	/**
 	* Route to delete one specific superhero. Only available to Admin users.
 	* @name delete/superheroes
 	* @function
 	* @memberof module:superheroes
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {String} id SuperHero id that will be deleted
 	* @returns {Response} Status of operation.
 	*/
	router.delete('/:_id',  middlewareAuth({route: 4}), SuperHeroController.delete.bind(SuperHeroController))

	/**
 	* Route to retrieve one specific superhero.
 	* @name get/superheroes
 	* @function
 	* @memberof module:superheroes
	* @inner
	* @param {String} x-access-token Token to authenticate the user
	* @param {String} id SuperHero id that will be retrieved
 	* @returns {Response} Status of operation.
 	*/
	router.get('/:_id',     middlewareAuth({route: 5}), SuperHeroController.readById.bind(SuperHeroController))
	return router
}

module.exports = createRouter